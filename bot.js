require("dotenv").config();
const express = require("express");
const axios = require("axios");
const cron = require("node-cron");
const TelegramBot = require("node-telegram-bot-api");

const app = express();
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const VACANCIES_URL = process.env.VACANCIES_URL;
const PORT = process.env.PORT;
const TIME = process.env.TIME || 4;

if (!BOT_TOKEN || !CHANNEL_ID || !VACANCIES_URL) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!");
    process.exit(1);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true }); // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ –∫–∞–Ω–∞–ª
async function fetchAndPostVacancies() {
    try {
        console.log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≤–∞–∫–∞–Ω—Å–∏–∏...");
        const response = await axios.get(VACANCIES_URL);
        const vacanciesHtml = response.data;

        const timestampMatch = vacanciesHtml.match(/<h1>(.*?)<\/h1>/);
        const vacancyMatches = [...vacanciesHtml.matchAll(/<div>.*?<a href="(.*?)".*?>(.*?)<\/a>.*?<p>–ó–∞—Ä–ø–ª–∞—Ç–∞: (.*?)<\/p>.*?<p>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: (.*?)<\/p>.*?<\/div>/gs)];

        if (!timestampMatch || vacancyMatches.length === 0) {
            console.log("‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        const timestamp = timestampMatch[1];

        let message = `üìÖ *${timestamp}*\n\n`;

        vacancyMatches.forEach(([, url, title, salary, skills], index) => {
            message += `üî• *${title}*\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${salary}\nüõ†Ô∏è –ù–∞–≤—ã–∫–∏: ${skills}\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é](${url})\n\n`;
        });

        console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª...");
        await bot.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–∞–∫–∞–Ω—Å–∏–π:", error.message);
    }
}

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
let vacancies = [];
// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
cron.schedule('*/10 * * * *', async () => {
    vacancies = await fetchAndPostVacancies(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–æ—Ç —Ä–∞–∑ –≤ —á–∞—Å
cron.schedule('0 * * * *', async () => {
    await sendVacanciesToBot(vacancies); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–æ—Ç
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Express
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Express! –°–ª—É—à–∞–µ–º –ø–æ—Ä—Ç ${PORT}.`);
});

// –õ–∞—É–Ω—á –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏!");
});
